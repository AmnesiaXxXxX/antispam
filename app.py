import asyncio
import datetime
import logging
import os
import re
import time
from functools import lru_cache
from logging.handlers import RotatingFileHandler
from typing import List, Optional
from database import Database

import aiohttp
import unidecode
from dotenv import load_dotenv
from pyrogram import Client, filters  # type: ignore
from pyrogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from collections import defaultdict

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = "logs"  # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
os.makedirs(log_dir, exist_ok=True)  # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ —Å –¥–∞—Ç–æ–π
log_filename = datetime.datetime.now(datetime.UTC).strftime("%Y-%m-%d.log")
log_path = os.path.join(log_dir, log_filename)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger()
logger.setLevel(logging.INFO)  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

# –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ (—Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 1 –ú–ë, 5 —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π)
file_handler = RotatingFileHandler(
    log_path,
    maxBytes=10**6,  # 1 –ú–ë –Ω–∞ —Ñ–∞–π–ª
    backupCount=5,  # –•—Ä–∞–Ω–µ–Ω–∏–µ 5 —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
)
file_handler.setLevel(logging.INFO)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
file_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(file_handler)
db = Database("antispam.db")

# –¢–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
token = os.getenv("TOKEN") or exit("TOKEN is not set")
bot_token = os.getenv("BOT_TOKEN") or exit("BOT_TOKEN is not set")
api_id = os.getenv("API_ID") or exit("API_ID is not set")
api_hash = os.getenv("API_HASH") or exit("API_HASH is not set")

START_MESSAGE = """# ü§ñ –í–µ–ª–∏–∫–∏–π –§–∏–ª—å—Ç—Ä - –£–º–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã —á–∞—Ç–æ–≤

–í–µ–ª–∏–∫–∏–π –§–∏–ª—å—Ç—Ä - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏. –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–µ—Å–ø–µ—á–∏—Ç—å —á–∏—Å—Ç–æ—Ç—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –Ω–µ –ø—Ä–∏–±–µ–≥–∞—è –∫ —Ä—É—á–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–π —Ä–∞–∑.

---

## üìã –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

### üõ°Ô∏è –ê–Ω—Ç–∏—Å–ø–∞–º - —Ñ—É–Ω–∫—Ü–∏–∏
- **–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∞–º–∞ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤**:  
  –ú–æ—â–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–ø—Ä–æ—â–∞—è –æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.  
- **–ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤**:  
  –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –≤–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–ª—è –æ–±—Ö–æ–¥–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.  
- **–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤**:  
  –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–∞–º.

### üëÆ –ú–æ–¥–µ—Ä–∞—Ü–∏—è
- **–£–¥–∞–ª–µ–Ω–∏–µ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞**:  
  –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞.  
- **–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π**:  
  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Å–Ω–∏–∑–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª–æ–∂–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.

### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- **–£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å**:  
  –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.  
- **–†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤**:  
  –ü–æ–¥—Å—Ç—Ä–æ–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.

### üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã
- **–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏**:  
  –ë–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö, —Å–æ–∑–¥–∞–≤–∞—è –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.  
- **–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**:  
  –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º.

### üóÑÔ∏è –ù–∞–¥—ë–∂–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
- **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SQLite**:  
  –õ–µ–≥–∫–æ–≤–µ—Å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–¥—ë–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.

### üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π**:  
  –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏. –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

### üõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
- **–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞**:  
  –ë–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞–∂–µ –≤ –∫—Ä—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö.  
- **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ**:  
  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ —á–µ—Ä–µ–∑ API.

---

–í–µ–ª–∏–∫–∏–π –§–∏–ª—å—Ç—Ä - —ç—Ç–æ –∏–¥–µ–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤ –ª—é–±—ã—Ö –º–∞—Å—à—Ç–∞–±–æ–≤. –ï–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –≥–∏–±–∫–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –ø–æ–¥ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –∫–æ–º—Ñ–æ—Ä—Ç –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.


"""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤
bot = Client(
    "bot",
    api_id=api_id,
    api_hash=api_hash,
    bot_token=bot_token,
)

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
SPAM_THRESHOLD = float(os.getenv("SPAM_THRESHOLD", "3"))  # –ü–æ—Ä–æ–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
waiting_for_word = defaultdict(bool)


def get_main_menu():
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="cancel")],
        ]
    )


@bot.on_message(filters.command("menu"))
async def menu_command(client, message):
    await message.reply_text(
        "üîß –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞:", reply_markup=get_main_menu()
    )


@bot.on_callback_query(filters.regex(r"ban_user_(\d+)_(\d+)"))
async def ban_user_callback(client: Client, callback_query: CallbackQuery):
    callback_query.data = callback_query.data.replace("ban_user_", "")
    msg_id = int(callback_query.data.split("_")[1])
    user_id = int(callback_query.data.split("_")[0])
    chat_id = callback_query.message.chat.id
    chat_member = await client.get_chat_member(chat_id, callback_query.from_user.id)
    target = await client.get_chat_member(chat_id, user_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await check_is_admin_callback(client, callback_query):
        return

    if (
        not chat_member.privileges.can_delete_messages
        and not chat_member.privileges.can_restrict_members
    ):
        await callback_query.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True
        )
        return

    # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ ID –Ω–µ —Ä–∞–≤–µ–Ω –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–º—É
    if user_id != 5957115070:
        if target.status.value in ["administrator", "owner"]:
            await callback_query.answer(
                "–¶–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –Ω–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å(", show_alert=True
            )
            return
        else:
            await client.ban_chat_member(chat_id, user_id)
            db.update_stats(chat_id, banned=True)
    else:
        await callback_query.answer(
            "–¢—ã —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Å–µ–±—è —Ö–æ—á–µ—à—å –∑–∞–±–∞–Ω–∏—Ç—å?", show_alert=True
        )
        return

    await callback_query.answer("–ó–∞–±–∞–Ω–µ–Ω!", show_alert=True)
    await client.delete_messages(chat_id, [msg_id, callback_query.message.id])


@bot.on_callback_query()
async def callback_query(client, callback_query: CallbackQuery):
    data = callback_query.data

    if data == "stats":
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = db.get_stats(callback_query.message.chat.id)
        await callback_query.message.reply(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:\n\n"
            f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats[0]}\n"
            f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats[1]}\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats[2]}\n"
            f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {stats[3]}"
        )

    elif data == "cancel":
        chat_id = callback_query.message.chat.id
        chat_member = await client.get_chat_member(chat_id, callback_query.from_user.id)
        if chat_member.status.value in ["administrator", "owner"]:
            await callback_query.message.delete()
        else:
            await callback_query.answer(
                "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º!", show_alert=True
            )
    elif data == "delete":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await check_is_admin_callback(client, callback_query):
            await callback_query.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True
            )
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–πF
        messages_to_delete = [
            callback_query.message.reply_to_message.id,
            callback_query.message.id,
        ]

        await client.delete_messages(callback_query.message.chat.id, messages_to_delete)
        db.update_stats(callback_query.message.chat.id, deleted=True)
        logger.info(
            f"Messages {messages_to_delete} deleted in chat {callback_query.message.chat.id}"
        )
    elif data == "settings":
        settings_markup = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", callback_data="filter_settings"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "‚è∞ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞", callback_data="autoclean_settings"
                    )
                ],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
            ]
        )
        await callback_query.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:", reply_markup=settings_markup
        )

    elif data == "channels_list":
        channels = db.get_all_channels()
        if not channels:
            text = "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç"
        else:
            text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:\n\n"
            for chat_id, title in channels:
                text += f"‚Ä¢ {title} (ID: {chat_id})\n"

        await callback_query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            ),
        )

    elif data == "back_to_main":
        await callback_query.message.edit_text(
            "üîß –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞:", reply_markup=get_main_menu()
        )

    elif data == "autoclean_settings":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        try:
            with open("autos.txt", "r", encoding="utf-8") as f:
                autos = f.read().splitlines()
        except FileNotFoundError:
            autos = []

        is_auto = str(callback_query.message.chat.id) in autos
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if is_auto else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞"

        autoclean_markup = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—é", callback_data="toggle_autoclean"
                    )
                ],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")],
            ]
        )

        await callback_query.message.edit_text(
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}\n\n"
            f"–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è "
            f"–±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=autoclean_markup,
        )

    elif data == "toggle_autoclean":
        if not await check_is_admin_callback(client, callback_query):
            return

        chat_id = str(callback_query.message.chat.id)
        try:
            with open("autos.txt", "r", encoding="utf-8") as f:
                autos = f.read().splitlines()
        except FileNotFoundError:
            autos = []

        if chat_id in autos:
            autos.remove(chat_id)
            status = "‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞"

        else:
            autos.append(chat_id)
            status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞"

        with open("autos.txt", "w", encoding="utf-8") as f:
            f.write("\n".join(autos))
        autoclean_markup = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—é", callback_data="toggle_autoclean"
                    )
                ],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")],
            ]
        )
        await callback_query.message.edit_text(
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}\n\n"
            f"–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è "
            f"–±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=autoclean_markup,
        )
        await callback_query.answer(f"–ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è {status}!", show_alert=True)
    elif data == "filter_settings":
        filter_settings_markup = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üîç –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ", callback_data="add_badword"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ", callback_data="remove_badword"
                    )
                ],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")],
            ]
        )
        await callback_query.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=filter_settings_markup
        )

    elif data == "add_badword":
        if not await check_is_admin_callback(client, callback_query):
            return

        waiting_for_word[callback_query.from_user.id] = True
        await callback_query.message.edit_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö.\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_word")]]
            ),
        )

    elif data == "cancel_add_word":
        waiting_for_word[callback_query.from_user.id] = False
        await callback_query.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=filter_settings_markup
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ FunStat API
async def check_user(user_id: int) -> bool | Optional[str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É "True"/"False", –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 60 –¥–Ω–µ–π —Å –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.

    :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏.
    """
    if not user_id:
        return False

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ FunStat API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"http://funstat.org/api/v1/users/{user_id}/stats_min",
                headers={
                    "accept": "application/json",
                    "Authorization": f"Bearer {token}",
                },
            ) as response:
                result = await response.json()

                first_msg_date_str = result.get("first_msg_date")
                if not first_msg_date_str:
                    return False

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç datetime
                first_msg_date = datetime.datetime.strptime(
                    first_msg_date_str, "%Y-%m-%dT%H:%M:%SZ"
                )
                delta = datetime.datetime.now(datetime.UTC) - first_msg_date

                # –ï—Å–ª–∏ —Å –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 60 –¥–Ω–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
                if delta >= datetime.timedelta(days=60):
                    return result
                else:
                    return False
    except Exception:
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def get_keywords(chat_id: int = None) -> List[str]:
    """
    –ß–∏—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.
    –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω chat_id, –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É —Å–ª–æ–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
        with open("bad_words.txt", "r", encoding="utf-8") as f:
            keywords = unidecode.unidecode(f.read().lower().replace(" ", "")).split(
                "\n"
            )

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω chat_id, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
        if chat_id:
            chat_keywords = db.get_chat_badwords(chat_id)
            keywords.extend(chat_keywords)

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        return list(filter(None, set(keywords)))
    except Exception as e:
        logger.error(f"Error reading keywords: {e}")
        return []


@bot.on_message(filters.text & filters.command(["add_badword"]))
async def add_badword(client, message: Message):
    word = " ".join(message.text.split(" ")[1:])
    with open("bad_words.txt", "a", encoding="utf-8") as f:
        f.write(f"\n{unidecode.unidecode(word.lower())}")
    keywords = get_keywords()
    await message.reply(
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤–æ: {word}\n–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤:\n{', '.join(keywords)}"
    )


@bot.on_message(filters.new_chat_members)
async def on_new_member(client: Client, message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω –∏–º–µ–Ω–Ω–æ –±–æ—Ç
    for new_member in message.new_chat_members:
        if new_member.is_self:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç
            await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
            break


@lru_cache(maxsize=128)
def get_special_patterns() -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    return [
        r"[\u0400-\u04FF]",  # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
        r"[\u0500-\u052F]",  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
        r"[\u2000-\u206F]",  # –ó–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
        r"[\u0180-\u024F]",  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–∞—Ç–∏–Ω–∏—Ü–∞
        r"[\u1D00-\u1D7F]",  # –§–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        r"[\u1E00-\u1EFF]",  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–∞—Ç–∏–Ω–∏—Ü–∞
        r"[\uFE00-\uFE0F]",  # –í–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        r"[\u0300-\u036F]",  # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º—ã–µ –¥–∏–∞–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏
        r"[\u1100-\u11FF]",  # –•–∞–Ω–≥—ã–ª—å
        r"[\u2600-\u26FF]",  # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        r"[\u2700-\u27BF]",  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        r"[\uFF00-\uFFEF]",  # –ü–æ–ª–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    ]


def search_keywords(text: str, chat_id: int = None) -> bool:
    """
    –ò—â–µ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω chat_id.
    """
    if not text or not isinstance(text, str):
        raise ValueError("–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")

    try:
        score = 0
        keywords = get_keywords(chat_id) or ["—Å–ª–æ–≤–æ"]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∏—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        normalized_text = unidecode.unidecode(text.lower())
        keyword_pattern = r"\b(" + "|".join(map(re.escape, keywords)) + r")\b"
        found_keywords = len(re.findall(keyword_pattern, normalized_text))

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        score += found_keywords

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü-—Å–∏–º–≤–æ–ª—ã
        special_chars_found = 0
        for pattern in get_special_patterns():
            if re.search(pattern, text):
                special_chars_found += 1

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ —Å–ø–µ—Ü-—Å–∏–º–≤–æ–ª—ã
        score += special_chars_found * 1.5
        return score >= SPAM_THRESHOLD

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {str(e)}")
        return False


@bot.on_message(filters.text & filters.command("set_threshold"))
async def set_threshold(client: Client, message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ —Å–ø–∞–º–∞."""
    try:
        if not await check_is_admin(client, message):
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞
        new_threshold = float(message.text.split()[1])
        if new_threshold <= 0:
            await message.reply("–ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
        global SPAM_THRESHOLD
        SPAM_THRESHOLD = new_threshold

        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env —Ñ–∞–π–ª
        env_path = os.path.join(os.path.dirname(__file__), ".env")
        with open(env_path, "r", encoding="utf-8") as f:
            lines = f.readlines()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º SPAM_THRESHOLD
        threshold_line = f"SPAM_THRESHOLD={new_threshold}\n"
        threshold_found = False

        for i, line in enumerate(lines):
            if line.startswith("SPAM_THRESHOLD="):
                lines[i] = threshold_line
                threshold_found = True
                break

        if not threshold_found:
            lines.append(threshold_line)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª
        with open(env_path, "w", encoding="utf-8") as f:
            f.writelines(lines)

        await message.reply(f"–ù–æ–≤—ã–π –ø–æ—Ä–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {SPAM_THRESHOLD}")

    except (IndexError, ValueError):
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_threshold [—á–∏—Å–ª–æ]")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Ä–æ–≥–∞: {str(e)}")
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Ä–æ–≥–∞: {str(e)}")


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.on_message(filters.text & filters.command(["start"]))
async def start(client: Client, message: Message):
    await message.reply(START_MESSAGE)


@bot.on_message(filters.text & filters.command(["gen_regex"]))
async def gen_regex(client: Client, message: Message):
    keywords = get_keywords() or ["—Å–ª–æ–≤–æ"]
    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    pattern = r"(" + "|".join(keywords) + r")"
    await message.reply(pattern)


@bot.on_message(filters.text & filters.command(["invert"]))
async def invert(client: Client, message: Message):
    await message.reply(unidecode.unidecode(message.text.split("#")[1]))


# –ö–æ–º–∞–Ω–¥–∞ /list - –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
@bot.on_message(filters.text & filters.command(["list"]))
async def list_command(client: Client, message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤."""
    try:
        bad_words = get_keywords()
        await message.reply(f"```–ó–∞–ø—Ä–µ—Ç–∫–∏\n{"\n".join(bad_words)}```")
    except Exception:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


# –ö–æ–º–∞–Ω–¥–∞ /check - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ FunStat API
@bot.on_message(filters.text & filters.command(["check"]))
async def check_command(client: Client, message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ FunStat API."""
    try:
        user_id = message.text.split(" ")[1]
        if not user_id.isdigit():
            user = await client.get_chat_member(message.chat.id, user_id)
            user_id = int(user.user.id)
        else:
            user_id = int(user_id)
        result = (
            await check_user(user_id) or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω."
        )  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
        await message.reply(result)
    except IndexError:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. {e}")


async def check_is_admin(client: Client, message: Message) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ, —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False.
    """
    user = await client.get_chat_member(message.chat.id, message.from_user.id)
    message.from_user.restrictions
    if not user.privileges:
        msg = await message.reply(
            f"–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º! {message.from_user.status.value}"
        )
        await asyncio.sleep(3.0)
        await client.delete_messages(message.chat.id, [msg.id, message.id])

        return False
    return True


async def check_is_admin_callback(
    client: Client, callback_query: CallbackQuery
) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞–∂–∞–≤—à–∏–π –∫–Ω–æ–ø–∫—É, —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False.
    """
    chat_id = callback_query.message.chat.id
    chat_member = await client.get_chat_member(chat_id, callback_query.from_user.id)
    if chat_member.status.value not in ["administrator", "owner"]:
        await callback_query.answer(
            "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º!", show_alert=True
        )
        return False
    return True


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å –±–∞–Ω–æ–º –∏ –æ—Ç–º–µ–Ω–æ–π
def ban_button(user_id: int, msg_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text="–ó–∞–±–∞–Ω–∏—Ç—å",
                    callback_data=f"ban_user_{user_id}_{msg_id}",
                ),
                InlineKeyboardButton(
                    text="–ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å",
                    callback_data="delete",
                ),
                InlineKeyboardButton(
                    text="–ì–∞–ª—è, –æ—Ç–º–µ–Ω–∞",
                    callback_data="cancel",
                ),
            ]
        ]
    )


@bot.on_message(filters.text & filters.command(["get_autos"]))
async def get_autos(client: Client, message: Message):
    autos = open("autos.txt", "r", encoding="utf-8").read().split("\n")
    await message.reply("\n".join(autos))


@bot.on_message(filters.text & filters.command(["autoclean"]))
async def add_autos(client: Client, message: Message):
    if not await check_is_admin(client, message):
        return
    autos = open("autos.txt", "r", encoding="utf-8").read().split("\n")
    if message.chat.id not in autos:
        autos.append(str(message.chat.id))
    else:
        await message.reply("–ß–∞—Ç —É–∂–µ –µ—Å—Ç—å!")
    with open("autos.txt", "w", encoding="utf-8") as f:
        f.write("\n".join(autos))
    msg = await message.reply("–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
    await asyncio.sleep(15)
    await message.delete()
    await msg.delete()


@bot.on_message(filters.text & filters.command(["remove_autoclean"]))
async def remove_autos(client: Client, message: Message):
    autos = open("autos.txt", "r", encoding="utf-8").read().split("\n")
    autos.remove(str(message.chat.id))
    with open("autos.txt", "w", encoding="utf-8") as f:
        f.write("\n".join(autos))
    await message.reply("–ê–≤—Ç–æ —É–¥–∞–ª–µ–Ω–æ!")


# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.on_message(filters.text & ~filters.channel & ~filters.bot)
async def main(client: Client, message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.
    –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –Ω–∞–π–¥–µ–Ω—ã, —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if waiting_for_word[message.from_user.id]:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Ñ–∞–π–ª
            word = message.text.strip()
            chat_id = message.chat.id

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
            success = db.add_chat_badword(
                chat_id, unidecode.unidecode(word), message.from_user.id
            )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            waiting_for_word[message.from_user.id] = False
            filter_settings_markup = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "üîç –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ", callback_data="add_badword"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ",
                            callback_data="remove_badword",
                        )
                    ],
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")],
                ]
            )
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                keywords = get_keywords(chat_id)
                await message.reply(
                    f"‚úÖ –°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞!\n\n"
                    f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤:\n`{', '.join(keywords)}`",
                    reply_markup=filter_settings_markup,
                )
            else:
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞")
            return

        if not message.text:
            return  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ

        # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏
        try:
            with open("autos.txt", "r", encoding="utf-8") as f:
                autos = f.read().splitlines()
        except FileNotFoundError:
            logger.error("File autos.txt not found")
            autos = []

        text = message.text
        logger.info(
            f"Processing message from {message.from_user.id} in chat {message.chat.id}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–∞–º–∞
        is_spam = search_keywords(text, message.chat.id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        db.add_message(message.chat.id, message.from_user.id, text, is_spam)

        if is_spam:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º
            is_user_valid = await check_user(message.from_user.id)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if is_user_valid == "False" and message.from_user.id != 5957115070:
                return

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            await message.forward("amnesiawho1")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —á–∞—Ç–∞
            if str(message.chat.id) in autos:
                await message.delete()
            else:
                await message.reply(
                    "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
                    reply_markup=ban_button(message.from_user.id, message.id),
                )

    except Exception as e:
        logger.exception(f"Error processing message: {e}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    start_time = time.time()  # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    bot.run()  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    total_time = round(time.time() - start_time, 2)
    logger.info(
        f"Total uptime {total_time if total_time < 3600 else int(total_time/60)} seconds. Bot stopped."
    )
