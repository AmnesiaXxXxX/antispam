# region IMPORTS
import inspect
import logging
import os
import re
import datetime
import asyncio
import time
from typing import List, Optional
import pyrogram
from pyrogram import Client, filters  # type: ignore
from pyrogram.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
)

import unidecode
import aiohttp
from dotenv import load_dotenv
from logging.handlers import RotatingFileHandler
from users import Users, User
# endregion


# region ENVIRONMENT_SETUP
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –¢–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
token = os.getenv("TOKEN") or exit("TOKEN is not set")
bot_token = os.getenv("BOT_TOKEN") or exit("BOT_TOKEN is not set")
api_id = os.getenv("API_ID") or exit("API_ID is not set")
api_hash = os.getenv("API_HASH") or exit("API_HASH is not set")
# endregion


# region LOGGING_SETUP
# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
log_dir = "logs"
os.makedirs(log_dir, exist_ok=True)  # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ —Å –¥–∞—Ç–æ–π
log_filename = datetime.datetime.now(datetime.UTC).strftime("%Y-%m-%d.log")
log_path = os.path.join(log_dir, log_filename)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger()
logger.setLevel(logging.INFO)  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

# –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ (—Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 1 –ú–ë, 5 —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π)
file_handler = RotatingFileHandler(
    log_path,
    maxBytes=10**6,  # 1 –ú–ë –Ω–∞ —Ñ–∞–π–ª
    backupCount=5,  # –•—Ä–∞–Ω–µ–Ω–∏–µ 5 —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
)
file_handler.setLevel(logging.INFO)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
file_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(file_handler)
# endregion


# region BOT_INITIALIZATION
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤
bot = Client(
    "bot",
    api_id=api_id,
    api_hash=api_hash,
    bot_token=bot_token,
)
# endregion


# region 1.FUNCTIONS
#
#
#
#
#


# region BAN_FUNCTION


async def ban_user(
    client: Client,
    user_id: int,
    channels: List[str] = open("channels.txt", "r", encoding="utf-8")
    .read()
    .splitlines(),
):
    try:
        for channel in channels:
            try:
                await client.ban_chat_member(channel, user_id)
                logging.info(f"Ban user {user_id} in channel {channel}")
                await asyncio.sleep(0.5)
            except Exception:
                logging.warning(f"Failed to ban user {user_id} in channel {channel}")
                pass
        with open("banned.txt", "a", encoding="utf-8") as f:
            f.write(f"{user_id}\n")

    except Exception as e:
        logger.exception(
            f"Error at {ban_user.__name__}:{inspect.getframeinfo(inspect.currentframe()).lineno}: {e}"
        )
        return False


# endregion


# region CHECK_USER
async def check_user(user_id: int) -> bool | Optional[str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É "True"/"False", –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 60 –¥–Ω–µ–π —Å –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏.
    """
    if not user_id:
        logger.exception(
            f"Error at {check_user.__name__}:{inspect.getframeinfo(inspect.currentframe()).lineno}: User ID is required"
        )
        raise ValueError("User ID is required")
    # if user_id == 5957115070:
    #     return False
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"http://funstat.org/api/v1/users/{user_id}/stats_min",
                headers={
                    "accept": "application/json",
                    "Authorization": f"Bearer {token}",
                },
            ) as response:
                result = await response.json()

                first_msg_date_str = result.get("first_msg_date")
                if not first_msg_date_str:
                    return False

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç datetime —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π UTC
                first_msg_date = datetime.datetime.strptime(
                    first_msg_date_str, "%Y-%m-%dT%H:%M:%SZ"
                ).replace(tzinfo=datetime.timezone.utc)
                delta = datetime.datetime.now(datetime.timezone.utc) - first_msg_date
                logging.info(delta)
                # –ï—Å–ª–∏ —Å –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 60 –¥–Ω–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
                if delta >= datetime.timedelta(days=60):
                    return result
                else:
                    return False
    except Exception as e:
        logging.error(f"Error fetching data: {e}")
        return False


# endregion


# region GET_KEYWORDS
def get_keywords() -> List[str]:
    """
    –ß–∏—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞.
    """
    try:
        with open("bad_words.txt", "r", encoding="utf-8") as f:
            keywords = unidecode.unidecode(
                f.read().lower().replace(" ", "")
            ).splitlines()
        return keywords
    except Exception:
        return []


# endregion


# region ADD_BADWORD
@bot.on_message(filters.command(["add_badword"]))
async def add_badword(client, message: Message):
    word = " ".join(message.text.split(" ")[1:])
    with open("bad_words.txt", "a", encoding="utf-8") as f:
        f.write(f"\n{unidecode.unidecode(word.lower())}")
    keywords = get_keywords()
    await message.reply(
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤–æ: {word}\n–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤:\n{', '.join(keywords)}"
    )


# endregion


# region ON_NEW_MEMBER
@bot.on_message(filters.new_chat_members)
async def on_new_member(client: Client, message: Message):
    for new_member in message.new_chat_members:
        if new_member.is_self:
            add_new_chat(message.chat.id)
            await start(client, message)


# endregion


# region SEARCH_KEYWORDS    
def search_keywords(text: str) -> bool:
    """
    –ò—â–µ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 3.

    :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :return: True, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–µ 3 –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.
    """

    text = unidecode.unidecode(text)

    try:
        keywords = get_keywords() or ["—Å–ª–æ–≤–æ"]
        pattern = r"(" + "|".join(keywords) + r")"

        found_keywords = [
            match.group() for match in re.finditer(pattern, text, re.IGNORECASE)
        ]
        return len(found_keywords) > 4
    except Exception:
        return False


# endregion


# region BAN
@bot.on_message(filters.command(["ban"]) & filters.user(5957115070))
async def ban(client: Client, message: Message):
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
    elif message.text.split(" ")[1:]:
        user_id = int(message.text.split(" ")[1])
    else:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    if not user_id:
        return
    await ban_user(client, user_id)

    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user_id}` –∑–∞–±–∞–Ω–µ–Ω.")


# endregion


# region IGNORE
@bot.on_message(filters.command(["ignore"]))
async def ignore(client: Client, message: Message):
    if message.reply_to_message:
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
    elif message.text.split(" ")[1:]:
        user_id = int(message.text.split(" ")[1])
    else:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    if not user_id:
        return

    ignore_list = open("ignore.txt", "r", encoding="utf-8").read().splitlines()
    if user_id not in ignore_list:
        with open("ignore.txt", "a", encoding="utf-8") as f:
            f.write(f"\n{user_id}")
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user_id}` –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö.")
    else:
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user_id}` —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö.")


# endregion


# region START_COMMAND
@bot.on_message(filters.command(["start"]))
async def start(client: Client, message: Message):
    await message.reply(
        """
<b>üëã –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!</b> –Ø <b>–∞–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç</b>. üõ°Ô∏è
        
üìù <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b> 
–•–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/contact</b>. üì¨

üí° <b>–ï—Å—Ç—å –∏–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è?</b> 
–û–¥–º–µ–Ω—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ —Ç–æ—Ç –∂–µ <b>/contact</b>. –ú—ã –∂–¥—ë–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è! ‚ú®

‚ÑπÔ∏è <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é?</b> 
–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π <b>/info</b> –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π. üîç
        """
    )


# endregion


# region INFO_COMMAND
@bot.on_message(filters.command(["info"]))
async def info(client: Client, message: Message):
    """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ö–∞–Ω–∏–∑–º–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞.
    """
    await message.reply(
        """
<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>

<b>üõ†Ô∏è –ú–µ—Ö–∞–Ω–∏–∑–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:</b>
üîπ <i>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:</i> –í—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã.  
üîπ <i>–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π:</i>  
    - –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ <b>–±–æ–ª–µ–µ 3 –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤</b>, –æ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç—Å—è.  
    - –ù–∞—Ä—É—à–µ–Ω–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è, –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –º–µ—Ä.  
üîπ <i>–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</i>  
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ <b>API FunStat</b>:  
        * –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª–µ–µ <b>60 –¥–Ω–µ–π</b>, –æ–Ω –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π.  
üîπ <i>–£–¥–æ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</i>  
    - <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>.  
    - <b>–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</b>.  
    - <b>–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ</b>.  

<b>‚ú® –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚úîÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.  
‚úîÔ∏è –ü—Ä—è–º–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ —á–∞—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.  
‚úîÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–æ–≤ –æ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.  

<b>üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç <b>–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</b>, –Ω–µ —Ç—Ä–µ–±—É—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã.

<b>üîó –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>  
–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–±–∏–≤–∞ –∏–ª–∏ –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª—é–¥—è—Ö –∏–ª–∏ –∫–∞–Ω–∞–ª–∞—Ö –≤ Telegram, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ—Ç <b>FunStat</b>.  
üåü –°—Å—ã–ª–∫–∞: <a href="https://t.me/ofunstat_robot?start=0101BE5C126301000000">FunStat</a>  

üí¨ –î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /contact
        """
    )


# endregion


# region CONTACT_COMMAND
@bot.on_message(filters.command(["contact"]) & filters.private)
async def contact(client: Client, message: Message):
    await client.send_message(
        "amnesiawho1",
        f"–ù–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–≤—è–∑–∞—Ç—å—Å—è –æ—Ç {message.from_user.username or message.chat.id}",
    )
    await message.reply("@amnesiawho1")


# endregion


# region GEN_REGEX_COMMAND
@bot.on_message(filters.command(["gen_regex"]))
async def gen_regex(client: Client, message: Message):
    keywords = get_keywords() or ["—Å–ª–æ–≤–æ"]
    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    pattern = r"(" + "|".join(keywords) + r")"
    await message.reply(pattern)


# endregion


# region INVERT_COMMAND
@bot.on_message(filters.command(["invert"]))
async def invert(client: Client, message: Message):
    """
    Inverts the given text.

    Example: /invert#hello -> hello
    """
    text = message.text.split(" ", 1)[1]
    if not text:
        await message.reply("Empty message")
    await message.reply(f"`{unidecode.unidecode(text)}`")


# endregion


# region LIST_COMMAND
@bot.on_message(filters.command(["list"]))
async def list_command(client: Client, message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤."""
    try:
        bad_words = get_keywords()
        await message.reply(f"```–ó–∞–ø—Ä–µ—Ç–∫–∏\n{'\n'.join(bad_words)}```")
    except Exception:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


# endregion


# region CHECK_COMMAND
@bot.on_message(filters.text & filters.command(["check"]))
async def check_command(client: Client, message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ FunStat API."""
    try:
        user_id = message.text.split(" ")[1]
        if not user_id.isdigit():
            user = await client.get_chat_member(message.chat.id, user_id)
            user_id = user.user.id
        else:
            user_id = int(user_id)
        result = str(await check_user(user_id))  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
        await message.reply(result or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω.")
    except IndexError:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. {e}")


# endregion


# region DELETE_CALLBACK
@bot.on_callback_query(filters.regex(r"delete"))
async def delete(client: Client, callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    chat_member = await client.get_chat_member(chat_id, callback_query.from_user.id)
    if chat_member.status.value not in ["administrator", "owner"]:
        await callback_query.answer(
            "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º!", show_alert=True
        )
    if (
        not chat_member.privileges.can_delete_messages
        and not chat_member.privileges.can_restrict_members
    ):
        await callback_query.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True
        )
        return
    await client.delete_messages(
        callback_query.message.chat.id, callback_query.message.reply_to_message.id
    )
    await callback_query.message.delete()


# endregion


# region CANCEL_CALLBACK
@bot.on_callback_query(filters.regex(r"cancel"))
async def cancel(client: Client, callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    chat_member = await client.get_chat_member(chat_id, callback_query.from_user.id)
    if chat_member.status.value in ["administrator", "owner"]:
        await callback_query.message.delete()
    else:
        await callback_query.answer(
            "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º!", show_alert=True
        )


# endregion


# region BAN_CALLBACK
@bot.on_callback_query(filters.regex(r"ban_user_(\d+)_(\d+)"))
async def check_admin_or_moderator(client: Client, callback_query: CallbackQuery):
    try:
        callback_query.data = callback_query.data.replace("ban_user_", "")
        msg_id = int(callback_query.data.split("_")[1])
        user_id = int(callback_query.data.split("_")[0])
        chat_id = callback_query.message.chat.id
        chat_member = await client.get_chat_member(chat_id, callback_query.from_user.id)
        target = await client.get_chat_member(chat_id, user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if chat_member.status.value not in ["administrator", "owner"]:
            await callback_query.answer(
                "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º!", show_alert=True
            )
            return
        if (
            not chat_member.privileges.can_delete_messages
            and not chat_member.privileges.can_restrict_members
        ):
            await callback_query.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True
            )
            return

        # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ ID –Ω–µ —Ä–∞–≤–µ–Ω –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–º—É
        if user_id != 5957115070:
            if target.status.value in ["administrator", "owner"]:
                await callback_query.answer(
                    "–¶–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –Ω–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å(", show_alert=True
                )
                return
            else:
                await client.ban_chat_member(chat_id, user_id)
        else:
            await callback_query.answer(
                "–¢—ã —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Å–µ–±—è —Ö–æ—á–µ—à—å –∑–∞–±–∞–Ω–∏—Ç—å?", show_alert=True
            )
            return

        await callback_query.answer("–ó–∞–±–∞–Ω–µ–Ω!", show_alert=True)
        await client.delete_messages(chat_id, [msg_id, callback_query.message.id])

        with open("ban_sentenses.txt", "a", encoding="utf-8") as f:
            f.write(callback_query.message.reply_to_message.text + "\n")
    except Exception as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}", show_alert=True)


# endregion


# region BAN_BUTTON
def ban_button(user_id: int, msg_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text="–ó–∞–±–∞–Ω–∏—Ç—å",
                    callback_data=f"ban_user_{user_id}_{msg_id}",
                ),
                InlineKeyboardButton(
                    text="–ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å",
                    callback_data="delete",
                ),
                InlineKeyboardButton(
                    text="–ì–∞–ª—è, –æ—Ç–º–µ–Ω–∞",
                    callback_data="cancel",
                ),
            ]
        ]
    )


# endregion


# region GET_AUTOS
@bot.on_message(filters.text & filters.command(["get_autos"]))
async def get_autos(client: Client, message: Message):
    autos = open("autos.txt", "r", encoding="utf-8").read().split("\n")
    await message.reply("\n".join(autos))


# endregion


# region AUTOCLEAN_COMMANDS
@bot.on_message(filters.text & filters.command(["autoclean"]))
async def add_autos(client: Client, message: Message):
    if message.from_user.status.value not in ["administrator", "owner"]:
        await message.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º!")
        return

    autos = open("autos.txt", "r", encoding="utf-8").read().split("\n")
    if message.chat.id not in autos:
        autos.append(str(message.chat.id))
    else:
        await message.reply("–ß–∞—Ç —É–∂–µ –µ—Å—Ç—å!")
    with open("autos.txt", "w", encoding="utf-8") as f:
        f.write("\n".join(autos))
    msg = await message.reply("–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
    await asyncio.sleep(15)
    await message.delete()
    await msg.delete()


@bot.on_message(filters.text & filters.command(["remove_autoclean"]))
async def remove_autos(client: Client, message: Message):
    autos = open("autos.txt", "r", encoding="utf-8").read().split("\n")
    autos.remove(str(message.chat.id))
    with open("autos.txt", "w", encoding="utf-8") as f:
        f.write("\n".join(autos))
    await message.reply("–ê–≤—Ç–æ —É–¥–∞–ª–µ–Ω–æ!")


# endregion


# region ADD_NEW_CHAT
def add_new_chat(chat_id: int) -> None:
    with open("channels.txt", "r", encoding="utf-8") as r:
        channels = r.read().splitlines()

    channel_id = str(chat_id)
    if channel_id not in channels:
        with open("channels.txt", "a", encoding="utf-8") as w:
            if channel_id.startswith("-"):
                w.write(f"{channel_id}\n")


# endregion


# endregion  # FUNCTIONS


# region MAIN_HANDLER
@bot.on_message(filters.text & ~filters.channel & ~filters.private)
async def main(client: Client, message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.
    –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –Ω–∞–π–¥–µ–Ω—ã, —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç.
    """

    ignore_list = open("ignore.txt", "r", encoding="utf-8").read().splitlines()
    if message.from_user.id in ignore_list:
        return
    logging.info(
        f"{message.from_user.id} to {f'https://t.me/{message.chat.username}' or message.chat.id }: {" ".join(message.text.splitlines())}"
    )
    try:
        add_new_chat(message.chat.id)

        if search_keywords(message.text):
            if not await check_user(message.from_user.id):
                await message.forward("amnesiawho1")
                await message.delete()
                await ban_user(client, message.from_user.id)
            # else:
            #     with open("ignore.txt", "a", encoding="utf-8") as f:
            #         f.write(f"\n{message.from_user.id}")

    except Exception as e:
        logger.exception(f"Error processing message: {e}")


# endregion


# region BOT_RUNNER
if __name__ == "__main__":
    start_time = time.time()  # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    bot.run()  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    total_time = round(time.time() - start_time, 2)
    logger.info(
        f"Total uptime {total_time if total_time < 3600 else int(total_time/60)} seconds. Bot stopped."
    )
# endregion
