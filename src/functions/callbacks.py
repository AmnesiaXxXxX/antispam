from typing import Optional
from uuid import uuid4

from pyrogram import errors
from pyrogram.client import Client
from pyrogram.errors import UserNotParticipant
from pyrogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from yookassa import Configuration, Payment

from src.constants import (
    WORDS_PER_PAGE,
    account_id,
    secret_key,
    waiting_for_payment,
    waiting_for_word,
)
from src.database import db
from src.markups.markups import (
    get_filter_settings_button,
    get_main_menu,
    get_settings_button,
)
from src.utils.logger_config import logger


def safe_get_callback_data(callback_query: CallbackQuery) -> Optional[str]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_query, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
    """
    return str(callback_query.data) if callback_query and callback_query.data else None


async def remove_badword_handler(client: Client, callback_query: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏ –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º.
    """
    callback_data = safe_get_callback_data(callback_query)
    if not callback_data:
        await callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.", show_alert=True)
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = 0
    try:
        if "_" in callback_data:
            _, page_str = callback_data.split("_", 1)
            page = int(page_str)
    except ValueError:
        page = 0  # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏, –Ω–∞—á–∏–Ω–∞–µ–º —Å 0

    chat_id = callback_query.message.chat.id
    words = db.get_chat_badwords(chat_id)

    # –ï—Å–ª–∏ —Å–ª–æ–≤ –Ω–µ—Ç, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
    if not words:
        await callback_query.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="filter_settings")]]
            ),
        )
        return

    total_pages = max((len(words) - 1) // WORDS_PER_PAGE, 0)

    keyboard = []
    start_idx = page * WORDS_PER_PAGE
    end_idx = start_idx + WORDS_PER_PAGE

    for word in words[start_idx:end_idx]:
        keyboard.append(
            [
                InlineKeyboardButton(
                    f"‚ùå {word}", callback_data=f"del_word_{chat_id}_{word}"
                )
            ]
        )

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"remove_badword_{page - 1}")
        )
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton("‚û°Ô∏è", callback_data=f"remove_badword_{page + 1}")
        )
    if nav_buttons:
        keyboard.append(nav_buttons)

    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="filter_settings")])
    markup = InlineKeyboardMarkup(keyboard)

    text = f"üìù –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages + 1}):"
    if callback_query.message.text != text:
        await callback_query.message.edit_text(text, reply_markup=markup)
    else:
        await callback_query.message.edit_reply_markup(markup)


async def delete_word_handler(client: Client, callback_query: CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã.
    """
    callback_data = safe_get_callback_data(callback_query)
    if not callback_data:
        await callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        return

    try:
        # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: "del_word_{chat_id}_{word}"
        _, chat_id_str, word = callback_data.split("_", 2)
        chat_id = int(chat_id_str)

        db.cursor.execute(
            "DELETE FROM chat_badwords WHERE chat_id = ? AND word = ?", (chat_id, word)
        )
        db.connection.commit()

        await callback_query.answer(f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ!")
        await remove_badword_handler(client, callback_query)

    except ValueError:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞.")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞", show_alert=True)
    except Exception as e:
        logger.error(f"Error deleting word: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞", show_alert=True)


async def ban_user_callback(client: Client, callback_query: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º/–≤–ª–∞–¥–µ–ª—å—Ü–µ–º,
    –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –∑–∞–±–∞–Ω–∏—Ç—å –±–æ—Ç–∞ –∏–ª–∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è.
    """
    callback_data = safe_get_callback_data(callback_query)
    if not callback_data:
        await callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞–Ω–∞.", show_alert=True)
        return

    answer = "OK"
    try:
        data = callback_data.lower().replace("ban_user_", "").split("_")
        if len(data) < 2:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

        user_id = int(data[0])
        msg_id = int(data[1])
        chat_id = callback_query.message.chat.id

        if user_id == client.me.id:
            raise errors.ChatAdminRequired("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å –±–æ—Ç–∞.")
        if user_id == callback_query.from_user.id:
            raise errors.ChatAdminRequired("–ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")

        target = await client.get_chat_member(chat_id, user_id)
        if target.status in ["administrator", "owner"]:
            raise errors.ChatAdminRequired(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/–≤–ª–∞–¥–µ–ª—å—Ü–µ–º."
            )

        await client.ban_chat_member(chat_id, user_id)
        db.update_stats(chat_id, banned=True)

        await client.delete_messages(chat_id, [msg_id, callback_query.message.id])
        answer = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!"
    except errors.ChatAdminRequired as e:
        answer = str(e)
    except UserNotParticipant as e:
        answer = str(e)
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–∞: {e}")
        answer = str(e)
    except Exception as e:
        logger.error(f"Error banning user: {e}")
        answer = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    finally:
        await callback_query.answer(answer, show_alert=True)



async def stats_callback(client: Client, callback_query: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞.
    """
    callback_data = safe_get_callback_data(callback_query)
    if callback_data == "stats":
        chat_id = callback_query.message.chat.id
        stats = db.get_stats(chat_id)
        if stats and len(stats) >= 2:
            await callback_query.message.edit_text(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:\n\n"
                f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats[0]}\n"
                f"–ò–∑ –Ω–∏—Ö —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats[1]}\n",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞—Ñ–∏–∫–æ–º",
                                callback_data="stats_graph",
                            ),
                        ],
                        [
                            InlineKeyboardButton(
                                "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"
                            ),
                        ],
                    ]
                ),
            )
        else:
            await callback_query.message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
                ),
            )


async def stats_graph_callback(client: Client, callback_query: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—ã–≤–æ–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    callback_data = safe_get_callback_data(callback_query)
    if callback_data == "stats_graph":
        chat_id = callback_query.message.chat.id
        result = db.get_stats_graph(chat_id)
        if isinstance(result, str):
            await callback_query.message.reply_photo(
                result,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
                        ]
                    ]
                ),
            )
        else:
            await callback_query.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫.", show_alert=True
            )


async def exit_callback(client: Client, callback_query: CallbackQuery) -> None:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏.
    """
    callback_data = safe_get_callback_data(callback_query)
    if callback_data == "exit":
        message = callback_query.message
        if message.reply_to_message:
            await message.reply_to_message.delete()
        await message.delete()


async def list_badwords_callback(client: Client, callback_query: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ.
    """
    callback_data = safe_get_callback_data(callback_query)
    if callback_data == "list_badwords":
        chat_id = callback_query.message.chat.id
        words = db.get_chat_badwords(chat_id)
        if not words:
            await callback_query.message.edit_text(
                "–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="filter_settings")]]
                ),
            )
        else:
            text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤:\n\n" + "\n".join(words)
            await callback_query.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="filter_settings")]]
                ),
            )


async def cancel_callback(client: Client, callback_query: CallbackQuery) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    callback_data = safe_get_callback_data(callback_query)
    if callback_data == "cancel":
        await callback_query.message.delete()


async def delete_callback(client: Client, callback_query: CallbackQuery) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞, –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ-–æ—Ç–≤–µ—Ç.
    """
    callback_data = safe_get_callback_data(callback_query)
    if callback_data == "delete":
        try:
            message = callback_query.message
            messages_to_delete = []
            if message.reply_to_message:
                messages_to_delete.append(message.reply_to_message.id)
            messages_to_delete.append(message.id)

            if messages_to_delete:
                await client.delete_messages(message.chat.id, messages_to_delete)
                db.update_stats(message.chat.id, deleted=True)
                logger.info(
                    f"Messages {messages_to_delete} deleted in chat {message.chat.id}"
                )
        except Exception as e:
            logger.error(f"Error deleting messages: {e}")


async def settings_callback(client: Client, callback_query: CallbackQuery) -> None:
    """
    –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.
    """
    callback_data = safe_get_callback_data(callback_query)
    if callback_data == "settings":
        await callback_query.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:", reply_markup=get_settings_button()
        )


async def back_to_main_callback(client: Client, callback_query: CallbackQuery) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    callback_data = safe_get_callback_data(callback_query)
    if callback_data == "back_to_main":
        await callback_query.message.edit_text(
            "üîß –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞:", reply_markup=get_main_menu()
        )


async def autoclean_settings_callback(
    client: Client, callback_query: CallbackQuery
) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è.
    """
    callback_data = safe_get_callback_data(callback_query)
    if callback_data == "autoclean_settings":
        chat_id = str(callback_query.message.chat.id)
        try:
            with open("autos.txt", "r", encoding="utf-8") as f:
                autos = f.read().splitlines()
        except FileNotFoundError:
            autos = []

        is_auto = chat_id in autos
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if is_auto else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞"

        autoclean_markup = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—é", callback_data="toggle_autoclean"
                    )
                ],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")],
            ]
        )

        await callback_query.message.edit_text(
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: **{status}**\n\n"
            f"–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è "
            f"–±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=autoclean_markup,
        )


async def toggle_autoclean_callback(
    client: Client, callback_query: CallbackQuery
) -> None:
    """
    –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏: –≤–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞.
    """
    callback_data = safe_get_callback_data(callback_query)
    if callback_data == "toggle_autoclean":
        chat_id = str(callback_query.message.chat.id)

        try:
            with open("autos.txt", "r", encoding="utf-8") as f:
                autos = f.read().splitlines()
        except FileNotFoundError:
            autos = []

        if chat_id in autos:
            autos.remove(chat_id)
            status = "‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞"
        else:
            autos.append(chat_id)
            status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞"

        with open("autos.txt", "w", encoding="utf-8") as f:
            f.write("\n".join(autos))

        autoclean_markup = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—é", callback_data="toggle_autoclean"
                    )
                ],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")],
            ]
        )
        await callback_query.message.edit_text(
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: **{status}**\n\n"
            f"–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è "
            f"–±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=autoclean_markup,
        )

        await callback_query.answer()


async def filter_settings_callback(
    client: Client, callback_query: CallbackQuery
) -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏ —Ç.–ø.).
    """
    callback_data = safe_get_callback_data(callback_query)
    if callback_data == "filter_settings":
        await callback_query.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=get_filter_settings_button()
        )


async def add_badword_callback(client: Client, callback_query: CallbackQuery) -> None:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞.
    """
    callback_data = safe_get_callback_data(callback_query)
    if callback_data == "add_badword":
        waiting_for_word[callback_query.from_user.id] = True
        await callback_query.message.edit_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö.\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_word")]]
            ),
        )


async def cancel_add_word_callback(
    client: Client, callback_query: CallbackQuery
) -> None:
    """
    –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞.
    """
    callback_data = safe_get_callback_data(callback_query)
    if callback_data == "cancel_add_word":
        waiting_for_word[callback_query.from_user.id] = False
        await callback_query.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=get_filter_settings_button()
        )


async def thank_me(client: Client, callback_query: CallbackQuery) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É (–∏–ª–∏ –ª—é–±–æ–º—É —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é).
    """
    try:
        await client.send_message(
            "amnesiawho1", f"{callback_query.from_user.first_name} —Å–∫–∞–∑–∞–ª(–∞) —Å–ø–∞—Å–∏–±–æ!"
        )
        await callback_query.answer("–ß–º–æ–∫", cache_time=1000)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
