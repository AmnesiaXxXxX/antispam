import asyncio
import datetime
import json
import os
import re
from functools import lru_cache
from typing import List, Optional

import aiohttp
import unidecode
from pyrogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)

from src.constants import SPAM_THRESHOLD, START_MESSAGE, token, waiting_for_word
from src.database import db
from src.markups.markups import (
    get_ban_button,
    get_filter_settings_button,
    get_main_menu,
)
from src.utils.logger_config import logger


async def start(_, message):
    await message.reply(START_MESSAGE)


async def gen_regex(_, message):
    keywords = get_keywords() or ["—Å–ª–æ–≤–æ"]

    pattern = r"(" + "|".join(keywords) + r")"
    await message.reply(pattern)


async def list_command(_, message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤."""
    try:
        bad_words = get_keywords()
        await message.reply(f"```–ó–∞–ø—Ä–µ—Ç–∫–∏\n{'\n'.join(bad_words)}```")
    except Exception:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


async def invert(_, message):
    await message.reply(unidecode.unidecode(message.text.split("")))


async def check_command(_, message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ FunStat API."""
    try:
        user_id = message.text.split(" ")[1]
        if not user_id.isdigit():
            user = await _.get_chat_member(message.chat.id, user_id)
            user_id = int(user.user.id)
        else:
            user_id = int(user_id)
        result = await check_user(user_id) or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω."
        await message.reply(result)
    except IndexError:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. {e}")


async def on_new_member(_, message):
    for new_member in message.new_chat_members:
        if new_member.is_self:
            await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
            break
        if db.is_user_banned(new_member.id):
            reply_markup = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "üö´ –ó–∞–±–∞–Ω–∏—Ç—å",
                            callback_data=f"ban_{message.id}_{message.from_user.id}",
                        ),
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∞",
                            callback_data="cancel",
                        ),
                    ],
                ]
            )
            await message.reply(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–ø–∞–º–µ—Ä!–ù—É–∂–Ω–æ –ª–∏ –µ–≥–æ –∑–∞–±–∞–Ω–∏—Ç—å",
                reply_markup=reply_markup,
            )


def search_keywords(text: str, chat_id: int | None = None) -> bool:
    """
    –ò—â–µ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω chat_id.
    """
    if not text or not isinstance(text, str):
        raise ValueError("–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")

    try:
        score = 0
        keywords = get_keywords(chat_id) or ["—Å–ª–æ–≤–æ"]

        normalized_text = unidecode.unidecode(text.lower())
        keyword_pattern = r"\b(" + "|".join(map(re.escape, keywords)) + r")\b"
        found_keywords = len(re.findall(keyword_pattern, normalized_text))

        score += found_keywords

        special_chars_found = 0
        for pattern in get_special_patterns():
            if re.search(pattern, text):
                special_chars_found += 2

        score += special_chars_found * 1.5
        return score >= SPAM_THRESHOLD

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {str(e)}")
        return False


async def set_threshold(_, message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ —Å–ø–∞–º–∞."""
    try:
        if not await check_is_admin(_, message):
            return

        new_threshold = float(message.text.split()[1])

        if new_threshold <= 0:
            await message.reply("–ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return

        global SPAM_THRESHOLD
        SPAM_THRESHOLD = new_threshold

        env_path = os.path.join(os.path.dirname(__file__), ".env")
        with open(env_path, "r", encoding="utf-8") as f:
            lines = f.readlines()

        threshold_line = f"SPAM_THRESHOLD={new_threshold}\n"
        threshold_found = False

        for i, line in enumerate(lines):
            if line.startswith("SPAM_THRESHOLD="):
                lines[i] = threshold_line
                threshold_found = True
                break

        if not threshold_found:
            lines.append(threshold_line)

        with open(env_path, "w", encoding="utf-8") as f:
            f.writelines(lines)

        await message.reply(f"–ù–æ–≤—ã–π –ø–æ—Ä–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {SPAM_THRESHOLD}")

    except (IndexError, ValueError):
        await message.reply(
            f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥: {SPAM_THRESHOLD}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ /set_threshold [–ß–∏—Å–ª–æ]"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Ä–æ–≥–∞: {str(e)}")
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Ä–æ–≥–∞: {str(e)}")


def highlight_banned_words(text: str, chat_id: int | None = None) -> str:
    """
    –û–±–≤–æ–¥–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ —Ç–µ–≥–∞–º–∏.

    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        chat_id (int, optional): ID —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –±–∞–Ω–≤–æ—Ä–¥–æ–≤

    Returns:
        str: –¢–µ–∫—Å—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    """
    if not text or not isinstance(text, str):
        return text

    try:
        keywords = get_keywords(chat_id) or []

        if not keywords:
            return text

        pattern = r"\b(" + "|".join(map(re.escape, keywords)) + r")\b"

        def replace(match):
            return f"<{match.group(0)}>"

        result = re.sub(pattern, replace, text, flags=re.IGNORECASE)

        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {str(e)}")
        return text


async def add_badword(_, message):
    word = " ".join(message.text.split(" ")[1:])
    with open("bad_words.txt", "a", encoding="utf-8") as f:
        f.write(f"\n{unidecode.unidecode(word.lower())}")
    keywords = get_keywords()
    await message.reply(
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤–æ: {word}\n–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤:\n{', '.join(keywords)}"
    )


@lru_cache(maxsize=128)
def get_special_patterns() -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    return [
        r"[\u0500-\u052F]",
        r"[\u0180-\u024F]",
        r"[\u1D00-\u1D7F]",
        r"[\u1E00-\u1EFF]",
        r"[\u0300-\u036F]",
        r"[\u1100-\u11FF]",
        r"[\uFF00-\uFFEF]",
    ]


async def menu_command(_, message):
    await message.reply_text(
        "üîß –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞:", reply_markup=get_main_menu()
    )


def get_keywords(chat_id: int | None = None) -> List[str]:
    """
    –ß–∏—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.
    –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω chat_id, –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É —Å–ª–æ–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞.
    """
    try:
        with open("bad_words.txt", "r", encoding="utf-8") as f:
            keywords = unidecode.unidecode(
                f.read().lower().replace(" ", "")
            ).splitlines()

        if chat_id:
            chat_keywords = db.get_chat_badwords(chat_id)
            keywords.extend(chat_keywords)

        return list(filter(None, set(keywords)))
    except Exception as e:
        logger.error(f"Error reading keywords: {e}")
        return []


async def check_user(user_id: int | None = None) -> bool | Optional[str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ FunStat API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î.
    """
    if not user_id:
        return

    if db.is_user_verified(user_id):
        return True

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"https://funstat.org/api/v1/users/{user_id}/stats_min",
                headers={
                    "accept": "application/json",
                    "Authorization": f"Bearer {token}",
                },
            ) as response:
                result = await response.json()
                if response.status != 200:
                    logger.error(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                    return False
                first_msg_date_str = result.get("first_msg_date")
                if not first_msg_date_str:
                    return False

                first_msg_date = datetime.datetime.strptime(
                    first_msg_date_str, "%Y-%m-%dT%H:%M:%SZ"
                ).replace(tzinfo=datetime.timezone.utc)

                now = datetime.datetime.now(datetime.timezone.utc)
                delta = now - first_msg_date

                if delta >= datetime.timedelta(days=60):
                    user_data = {
                        "first_msg_date": first_msg_date_str,
                        "messages_count": result.get("messages_count", 0),
                        "chats_count": result.get("chats_count", 0),
                    }
                    db.add_verified_user(user_id, user_data)
                    return json.dumps(user_data)

                return False

    except Exception as e:
        logger.error(f"Error checking user: {e}")
        return False


async def check_is_admin(_, message) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ, —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False.
    """
    user = await _.get_chat_member(message.chat.id, message.from_user.id)
    message.from_user.restrictions
    if not user.privileges:
        msg = await message.reply(
            f"–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º! {message.from_user.status.value}"
        )
        await asyncio.sleep(3.0)
        await _.delete_messages(message.chat.id, [msg.id, message.id])

        return False
    return True


async def main(_, message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.
    –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –Ω–∞–π–¥–µ–Ω—ã, —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç.
    """
    try:
        if waiting_for_word[message.from_user.id]:
            word = message.text.strip()
            chat_id = message.chat.id
            success = db.add_chat_badword(chat_id, word, message.from_user.id)
            waiting_for_word[message.from_user.id] = False
            if success:
                await message.reply(
                    f"‚úÖ –°–ª–æ–≤–æ **{word}** –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞!\n\n",
                    reply_markup=get_filter_settings_button(),
                )
            else:
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞")
            return

        try:
            with open("autos.txt", "r", encoding="utf-8") as f:
                autos = f.read().splitlines()
        except FileNotFoundError:
            logger.error("File autos.txt not found")
            autos = []

        text = message.text
        logger.info(
            f"Processing message from {message.chat.id}{f' - {message.chat.username}' if message.chat.username else ''} - {message.from_user.id}: {' '.join(text.splitlines())}"
        )

        def ensure_chat_exists(chat_id: int, chat_title: str | None = None):
            db.cursor.execute("SELECT chat_id FROM chats WHERE chat_id = ?", (chat_id,))
            if not db.cursor.fetchone():
                db.cursor.execute(
                    "INSERT INTO chats (chat_id, title) VALUES (?, ?)",
                    (chat_id, chat_title or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"),
                )
                db.connection.commit()

        ensure_chat_exists(message.chat.id, message.chat.title)

        is_spam = search_keywords(text, message.chat.id)

        db.add_user(
            user_id=message.from_user.id,
            first_name=message.from_user.first_name,
            username=message.from_user.username if message.from_user.username else None,
        )
        db.add_message(
            message.chat.id,
            message.from_user.id,
            highlight_banned_words(message.text, message.chat.id),
            is_spam,
        )
        db.update_stats(message.chat.id, messages=True)
        if is_spam:
            is_user_valid = await check_user(
                message.from_user.id if message.from_user.id != 5957115070 else None
            )

            if is_user_valid == "False" and message.from_user.id != 5957115070:
                return

            await message.forward("amnesiawho1")
            if len(message.text) > 1000:
                return

            if str(message.chat.id) in autos:
                await message.delete()
            else:
                await message.reply(
                    "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
                    reply_markup=get_ban_button(message.from_user.id, message.id),
                )
            db.add_spam_warning(message.from_user.id, message.chat.id, message.text)

            db.update_stats(message.chat.id, deleted=True)

    except Exception as e:
        logger.exception(f"Error processing message: {e}")


async def remove_autos(_, message):
    autos = open("autos.txt", "r", encoding="utf-8").read().split("\n")
    autos.remove(str(message.chat.id))
    with open("autos.txt", "w", encoding="utf-8") as f:
        f.write("\n".join(autos))
    await message.reply("–ê–≤—Ç–æ —É–¥–∞–ª–µ–Ω–æ!")


async def get_autos(_, message):
    autos = open("autos.txt", "r", encoding="utf-8").read().split("\n")
    await message.reply("\n".join(autos))


async def add_autos(_, message):
    if not await check_is_admin(_, message):
        return
    autos = open("autos.txt", "r", encoding="utf-8").read().split("\n")
    if message.chat.id not in autos:
        autos.append(str(message.chat.id))
    else:
        await message.reply("–ß–∞—Ç —É–∂–µ –µ—Å—Ç—å!")
    with open("autos.txt", "w", encoding="utf-8") as f:
        f.write("\n".join(autos))
    msg = await message.reply("–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
    await asyncio.sleep(15)
    await message.delete()
    await msg.delete()


async def check_is_admin_callback(_, callback_query) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞–∂–∞–≤—à–∏–π –∫–Ω–æ–ø–∫—É, —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False.
    """
    chat_id = callback_query.message.chat.id
    chat_member = await _.get_chat_member(chat_id, callback_query.from_user.id)
    if chat_member.status.value not in ["administrator", "owner"]:
        await callback_query.answer(
            "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º!", show_alert=True
        )
        return False
    return True
